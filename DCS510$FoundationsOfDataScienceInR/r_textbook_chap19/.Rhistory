### Flattening Data
people <- data.frame(names=c("Ed", "Jessica", "Keagan"))
favorates <- data.frame(
food = c("Pizza", "Pizza", "Salad"),
music = c("Bluegrass", "Indie", "Eletronic")
)
people$favorates <- favorates
print(people)
print(people$favorates)
print(people$favorates.food)
print(people$favorates$food)
print(people$favorates.food)
people_flatten <- faltten(people)
print(people$favorates.food)
people_flatten <- flatten(people)
print(people$favorates.food)
print_flatten(people$favorates.food)
print(people_flatten$favorates.food)
print(people.name)
print(people$name)
View(people_flatten)
View(people)
View(people_flatten)
people$favorates <- favorates
View(people)
# Load required packages
# library(httr)
# library(jsonlite)
library(dplyr)
library(ggrepel)
# Load required packages
library(httr)
library(jsonlite)
library(dplyr)
library(ggrepel)
install.packages("devtools")
# devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Load required packages
# library(httr)
# library(jsonlite)
library(dplyr)
library(ggrepel)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Load required packages
# library(httr)
# library(jsonlite)
library(dplyr)
library(ggrepel2)
library(ggrepel)
install.packages("ggrepel")
library(dplyr)
library(ggrepel)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(devtools) # for installing packages from GitHub
library(usethis)
library(devtools) # for installing packages from GitHub
library(ggmap)
register_google(key="xxxxxxxxxxxxx")
# Load your Yelp API key from a separate file so that you can access the API:
source("./yelp_api_key.R") # the `yelp_key` variable is now available
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
View(query_params)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
View(response)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
View(response_data)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
View(restaurants)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
View(response_data)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
View(restaurants)
# Modify the data frame for analysis and presentation
# Generate a rank of each restaurant based on row number
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
location = c(-122.3321, 47.6062),
zoom = 11,
source = "google")
)
register_google(key="xxxxxxx")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
location = c(-122.3321, 47.6062),
zoom = 11,
source = "google")
)
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
#    location = c(-122.3321, 47.6062),
location = "Seattle, WA",
zoom = 11)#,
#    source = "google")
)
register_google(key="xxxxxxxxx")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
#    location = c(-122.3321, 47.6062),
location = "Seattle, WA",
zoom = 11)#,
#    source = "google")
)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
#    location = c(-122.3321, 47.6062),
location = "Seattle, WA",
zoom = 11)#,
#    source = "google")
)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(usethis)
library(devtools) # for installing packages from GitHub
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("Rtools")
library(devtools) # for installing packages from GitHub
# install.packages("Rtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(ggmap)
register_google(key="xxxxxxx")
# Load your Yelp API key from a separate file so that you can access the API:
source("./yelp_api_key.R") # the `yelp_key` variable is now available
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("Sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
View(response_data)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
library(dplyr)
library(ggplot2)
library(ggrepel)
library(usethis)
library(devtools) # for installing packages from GitHub
# install.packages("Rtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
# install.packages("Rtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup", force = TRUE)
library(ggmap)
register_google(key="xxxxxxxxxxx")
# Load your Yelp API key from a separate file so that you can access the API:
source("./yelp_api_key.R") # the `yelp_key` variable is now available
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("Sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
library(dplyr)
library(ggplot2)
library(ggrepel)
library(usethis)
library(devtools) # for installing packages from GitHub
# install.packages("Rtools")
# devtools::install_github("dkahle/ggmap", ref = "tidyup", force = TRUE)
library(ggmap)
register_google(key="xxxxxxxxxxx")
# Load your Yelp API key from a separate file so that you can access the API:
source("./yelp_api_key.R") # the `yelp_key` variable is now available
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("Sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
rm(list=ls())
library(dplyr)
library(ggplot2)
library(ggrepel)
library(usethis)
library(devtools) # for installing packages from GitHub
# install.packages("Rtools")
# devtools::install_github("dkahle/ggmap", ref = "tidyup", force = TRUE)
library(ggmap)
register_google(key="xxxxxxxxx")
# Load your Yelp API key from a separate file so that you can access the API:
source("./yelp_api_key.R") # the `yelp_key` variable is now available
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("Sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
View(restaurants)
rm(list=ls())
library("httr")
library("jsonlite")
library("dplyr")
library("ggrepel")
library("ggmap")
register_google(key="xxxxxxxxxxx")
source("./yelp_api_key.R") # the `yelp_key` variable is now available
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("Sangmork", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Make a GET request, including the API key (as a header) and the list of
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
# Generate a rank of each restaurant based on row number
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
#    location = c(-122.3321, 47.6062),
location = "Seattle, WA",
zoom = 11)#,
#    source = "google")
)
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
#    location = c(-122.3321, 47.6062),
location = "Seattle, WA",
zoom = 11,
source = "google")
)
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(
get_map(
location = c(-122.3321, 47.6062),
#    location = "Seattle, WA",
zoom = 11,
source = "google")
)
base_map <- ggmap(
get_map(
location = "Seattle, WA",
zoom = 11)
)
library("dplyr")
library("tidyr")
notices <- read.csv("data_files/Eviction_Notices.csv", stringsAsFactors = F)
notices <-eviction_notices %>%
mutate(date = as.Date(File.Date, format="%m/%d/%y")) %>%
filter(format(date, "%Y") == "2007")
eviction_notices <- read.csv("data_files/Eviction_Notices.csv", stringsAsFactors = F)
notices <-eviction_notices %>%
mutate(date = as.Date(File.Date, format="%m/%d/%y")) %>%
filter(format(date, "%Y") == "2007")
notices <-eviction_notices %>%
mutate(date = as.Date(File.Date, format="%m/%d/%Y")) %>%
filter(format(date, "%Y") == "2007")
notices <-eviction_notices %>%
mutate(date = as.Date(File.Date, format="%m/%d/%Y")) %>%
filter(format(date, "%Y") == "2007") %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\C", "", lat)),
long = as.numeric(gsub("\\)", "", long))
)
notices <-eviction_notices %>%
mutate(date = as.Date(File.Date, format="%m/%d/%Y")) %>%
filter(format(date, "%Y") == "2007") %>%
separate(Location, c("lat", "long"), ", ") %>%
mutate(
lat = as.numeric(gsub("\\(", "", lat)),
long = as.numeric(gsub("\\)", "", long))
)
x <- -3
abs(x)
sqrt(x)
sqrt(abs(x))
ceiling(3.475)
ceiling(v2)
v2 <- 3.475
abs(x)
sqrt(abs(v1))
ceiling(v2)
floor(v2)
trunc(v2)
round(v1, n=2)
round(v2, n=2)
round(v2, digits=2)
signif(v2, dignts=2)
signif(v2, digits=2)
cos(pi)
sin(pi)
tan(pi)
log(e)
log(2)
log10(2)
exp(2)
print(is.numeric(v2))
print(is.numeric(v2))
v2
###
v1 = 3.1345
v2 = "23"
v3 = FALSE
print(is.numeric(v2))
v4 = c(1, 3, 5, 7, 9)
v5 = matrix(1:9, nrow = 3)
v5
is.character(v2)
as.numeric(v2)
as.character(v4)
as.vector(v5)
as.data.frame(v5)
as.data.frame(v4)
###
v1 <- data("mtcars")
v1
###
v1 <- data(mtcars)
v1
###
v1 <- data(mtcars)
v1
View(mtcars)
newdata <- mtcars$mpg
newdata <- order(mtcars$mpg)
newdata <- order(mtcars$mpg)
newdata
newdata <- mtcars[order(mtcars$mpg)]
newdata = mtcars[order(mtcars$mpg)]
newdata <- order(mtcars$mpg)
newdata
View(mtcars)
newdata <- mtcars[order(mtcars$mpg)]
newdata <- mtcars[[order(mtcars$mpg)]]
newdata <- mtcars[order(mtcars$mpg)]
order_of_rows <- order(mtcars$mpg)
order_of_rows
order_of_rows <- order(mtcars$mpg)
order_of_rows
newdata <- mtcars[order_of_rows)]
newdata <- mtcars[(order_of_rows)]
newdata <- mtcars[order_of_rows]
newdata <- mtcars[3]
newdata
mtcars$hp
order(mtcars$hp)
mtcars[order(mtcars)]
mtcars[order(mtcars$hp)]
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shiny")
shiny::runApp('~/GitHub/dcs-510_foundations_of_datascience/r_textbook_chap19')
